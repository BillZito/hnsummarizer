This post covers how I’ve done this, and should be of interest to anybody else who wants to help speed up the Rust compiler.,Therefore, I mostly measure the stage1 compiler because it’s much faster to just build the stage1 compiler, which I do with the following command.,The "deaths" value here indicate the total number of calls to malloc for each call stack, which is usually the metric of most interest.  The "acc-ratios" value can also be interesting, especially if the "rd" value is 0.00, because that indicates the allocated blocks are never read.,You could use the compiler itself, but it’s big and complicated and reasoning about the various stages can be confusing, so I have avoided that myself.,It has been used to track rustc’s performance at perf.rust-lang.org for some time, but it wasn’t easy to use locally until I wrote a script for that purpose.,But DHAT’s output showed me that the vast majority of arenas never received such a request! So I made TypedArena lazy — the first chunk is now only allocated when necessary.,Even better, because this change is to Rust’s stdlib, rather than rustc itself, it will speed up any program that creates HashSets without using them.,A lot of programs have broadly similar profiles, but occasionally you get an odd one that stresses a different part of the compiler.,Although I’ve had lots of help on the #rustc IRC channel — big thanks to eddyb and simulacrum in particular — there may be things I am doing wrong or sub-optimally.